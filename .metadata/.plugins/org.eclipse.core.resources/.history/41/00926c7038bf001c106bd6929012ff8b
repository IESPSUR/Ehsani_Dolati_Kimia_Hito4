package com.animals.controllers;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.http.ResponseEntity;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.animals.DAO.PublicacionDAO;
import com.animals.DAO.UsuarioDAO;
import com.animals.models.PublicacionModel;
import com.animals.models.UsuarioModel;
import com.animals.services.StorageService;

@RestController
public class ImageController {

	@Autowired
	UsuarioDAO userDao;
	@Autowired
	PublicacionDAO postDao;
	private final StorageService storageService;

	@Autowired
	public ImageController(StorageService storageService) {
		this.storageService = storageService;
	}

	/*
	 * @GetMapping("/") public String listUploadedFiles(Model model) throws
	 * IOException {
	 * 
	 * model.addAttribute("files", storageService.loadAll().map( path ->
	 * MvcUriComponentsBuilder.fromMethodName(ImageController.class, "serveFile",
	 * path.getFileName().toString()).build().toUri().toString())
	 * .collect(Collectors.toList()));
	 * 
	 * return "uploadForm"; }
	 */

	@GetMapping("/get/image/{nombreUsuNumberPub:.+}")
	@ResponseBody
	public ResponseEntity<Resource> serveFile(@PathVariable String nombreUsuNumberPub) {
		Resource file = null;
		// Si la imagen es del pefil del usuario, sino (si es de una publicación)
		if (nombreUsuNumberPub.split("_")[0].matches("[a-zA-Z]")) {
			file = storageService
					.loadAsResource(userDao.getByNombreUsuario(nombreUsuNumberPub.split("_")[0]).getFoto());
		} else {
			file = storageService
					.loadAsResource(postDao.getById(Integer.parseInt(nombreUsuNumberPub.split("_")[0])).getFoto());
		}
		return ResponseEntity.ok().body(file);
	}

	@PostMapping("/upload/image/")
	public String handleFileUpload(@RequestParam("image") MultipartFile file) {

		// Si la imagen es del pefil del usuario, sino (si es de una publicación)

		// Create a pattern from regex
		Pattern pattern = Pattern.compile("[a-zA-Z]+");
		// Get the String to be matched
		String hola = file.getName().split("_")[0];
		Matcher matcher = pattern.matcher(hola);
		String f = file.getOriginalFilename();
		if (matcher.matches()) {
			UsuarioModel userToUpdate = new UsuarioModel(file.getName().split("_")[0]);
			userToUpdate.copyData(userDao.getByNombreUsuario(file.getName().split("_")[0]));
			userToUpdate.setFoto(file.getName());
			userDao.update(userToUpdate);
		} else {
			PublicacionModel postToUpdate = new PublicacionModel(Integer.parseInt(file.getName().split("_")[0]));
			postToUpdate.copyData(postDao.getById(Integer.parseInt(file.getName().split("_")[0])));
			postToUpdate.setFoto(file.getName());
			postDao.update(postToUpdate);
		}
		return storageService.store(file);
	}

	/*
	 * @ExceptionHandler(StorageFileNotFoundException.class) public
	 * ResponseEntity<?> handleStorageFileNotFound(StorageFileNotFoundException exc)
	 * { return ResponseEntity.notFound().build(); }
	 */

}