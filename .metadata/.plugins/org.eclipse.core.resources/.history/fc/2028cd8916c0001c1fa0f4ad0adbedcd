package com.animals.controllers;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.regex.Pattern;

import javax.xml.transform.Source;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.animals.DAO.PublicacionDAO;
import com.animals.DAO.UsuarioDAO;
import com.animals.models.PublicacionModel;
import com.animals.models.UsuarioModel;
import com.animals.services.StorageService;

@RestController
public class ImageController {

	@Autowired
	UsuarioDAO userDao;
	@Autowired
	PublicacionDAO postDao;
	private final StorageService storageService;

	@Autowired
	public ImageController(StorageService storageService) {
		this.storageService = storageService;
	}

	/*
	 * @GetMapping("/") public String listUploadedFiles(Model model) throws
	 * IOException {
	 * 
	 * model.addAttribute("files", storageService.loadAll().map( path ->
	 * MvcUriComponentsBuilder.fromMethodName(ImageController.class, "serveFile",
	 * path.getFileName().toString()).build().toUri().toString())
	 * .collect(Collectors.toList()));
	 * 
	 * return "uploadForm"; }
	 */

	@GetMapping("/get/image/{nombreUsuNumberPub:.+}")
	@ResponseBody
	public ResponseEntity<byte[]> serveFile(@PathVariable String nombreUsuNumberPub) {
		Resource file = null;
		// Si la imagen es del pefil del usuario, sino (si es de una publicación)
		if (Pattern.compile("[a-zA-Z]+").matcher(nombreUsuNumberPub).matches()) {
			file = storageService.loadAsResource(userDao.getByNombreUsuario(nombreUsuNumberPub).getFoto());
		} else {
			file = storageService.loadAsResource(postDao.getById(Integer.parseInt(nombreUsuNumberPub)).getFoto());
		}
		/*ByteArrayOutputStream baos = new ByteArrayOutputStream();
		InputStream is = null;

		try {
			URL url = file.getURL();

			is = url.openStream();
			byte[] byteChunk = new byte[4096]; // Or whatever size you want to read in at a time.
			int n;

			while ((n = is.read(byteChunk)) > 0) {
				baos.write(byteChunk, 0, n);
			}
		} catch (IOException e) {
			e.printStackTrace();
			// Perform any other exception handling that's appropriate.
		} finally {
			if (is != null) {
				try {
					is.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}*/
			//return ResponseEntity.ok().body(IOUtils.toByteArray(file.getInputStream()));
		
		byte[] byteArr =null;
		try {
			long size;
			InputStream stream = file.getInputStream();
			size = file.getFile().length();
			byteArr = convertStreamToByteArray(stream, size);
		} catch (IOException e) {
			e.printStackTrace();
		}
		ArrayList<String> tipoImagen = new ArrayList<String>();
		tipoImagen.add("image/png");
		
		HttpHeaders httpHeaders = new HttpHeaders();
		httpHeaders.put("Content-Type", tipoImagen);
		
		return ResponseEntity.ok().headers(httpHeaders).body(byteArr);

		
	}

	public byte[] convertStreamToByteArray(InputStream stream, long size) throws IOException {

	    // check to ensure that file size is not larger than Integer.MAX_VALUE.
	    if (size > Integer.MAX_VALUE) {
	        return new byte[0];
	    }

	    byte[] buffer = new byte[(int)size];
	    ByteArrayOutputStream os = new ByteArrayOutputStream();

	    int line = 0;
	    // read bytes from stream, and store them in buffer
	    while ((line = stream.read(buffer)) != -1) {
	        // Writes bytes from byte array (buffer) into output stream.
	        os.write(buffer, 0, line);
	    }
	    stream.close();
	    os.flush();
	    os.close();
	    return os.toByteArray();
	}
	
	@PostMapping("/upload/image/")
	public String handleFileUpload(@RequestParam("image") MultipartFile file) {

		// Si la imagen es del pefil del usuario, sino (si es de una publicación)

		String f = file.getOriginalFilename();
		if (Pattern.compile("[a-zA-Z]").matcher(file.getOriginalFilename().split("_")[0]).matches()) {
			UsuarioModel userToUpdate = new UsuarioModel(file.getOriginalFilename().split("_")[0]);
			userToUpdate.copyData(userDao.getByNombreUsuario(file.getOriginalFilename().split("_")[0]));
			userToUpdate.setFoto(file.getOriginalFilename());
			userDao.update(userToUpdate);
		} else {
			PublicacionModel postToUpdate = new PublicacionModel(
					Integer.parseInt(file.getOriginalFilename().split("_")[0]));
			postToUpdate.copyData(postDao.getById(Integer.parseInt(file.getOriginalFilename().split("_")[0])));
			postToUpdate.setFoto(file.getOriginalFilename());
			postDao.update(postToUpdate);
		}
		return storageService.store(file);
	}

	/*
	 * @ExceptionHandler(StorageFileNotFoundException.class) public
	 * ResponseEntity<?> handleStorageFileNotFound(StorageFileNotFoundException exc)
	 * { return ResponseEntity.notFound().build(); }
	 */

}